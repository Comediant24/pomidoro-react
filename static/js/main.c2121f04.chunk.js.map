{"version":3,"sources":["styles/globalStyles.js","components/Button/Button.js","config/config.js","components/Controls/Controls.js","components/Header/Header.js","components/Pomodoro/Pomodoro.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["GlobalStyle","createGlobalStyle","normalize","Button","onButtonClick","className","title","ButtonWrapper","onClick","styled","button","TITLE_BUTTON","Controls","isRunning","onStartClick","onResetClick","onPauseClick","onBreakClick","setFocusTime","handleShowEditButton","isEdit","isBreak","ControlsWrapper","ControlsButton","section","Header","HeaderWrapper","HeaderTitle","header","h1","Pomodoro","handleTimeEditSubtract","handleTimeEditAdd","handleHiddenButtonEdit","minutes","seconds","PomodoroWrapper","EditButtonWrapper","EditButton","Timer","div","App","useState","currentTime","setCurrentTime","timeLeft","setTimeLeft","setIsRunning","setIsEdit","setIsBreak","intervalRef","useRef","useEffect","window","navigator","vibrate","padTime","time","Math","floor","toString","padStart","resetRunningState","current","toResetTime","clearInterval","Wrapper","AppContainer","setInterval","setTimeout","BREAK_TIME","BackgroundMask","style","clipPath","Background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2121f04.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\nimport normalize from 'styled-normalize';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  @import url('https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap');\r\n\r\n  ${normalize};\r\n\r\n  body {\r\n    font-family:  'Share Tech Mono', 'Courier New', monospace;\r\n    min-width: 320px;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = ({ onButtonClick, className, title }) => {\r\n  return (\r\n    <ButtonWrapper onClick={onButtonClick} className={className}>\r\n      {title}\r\n    </ButtonWrapper>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n\r\nconst ButtonWrapper = styled.button``;\r\n","export const CURRENT_TIME = 25;\r\nexport const BREAK_TIME = 5;\r\nexport const TITLE_BUTTON = [\r\n  'start',\r\n  'pause',\r\n  'reset',\r\n  'edit',\r\n  'save',\r\n  'break',\r\n  'focus',\r\n];\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../Button/Button';\r\nimport { TITLE_BUTTON } from '../../config/config';\r\n\r\nconst Controls = ({\r\n  isRunning,\r\n  onStartClick,\r\n  onResetClick,\r\n  onPauseClick,\r\n  onBreakClick,\r\n  setFocusTime,\r\n  handleShowEditButton,\r\n  isEdit,\r\n  isBreak,\r\n}) => {\r\n  return (\r\n    <ControlsWrapper>\r\n      {!isRunning && (\r\n        <ControlsButton onButtonClick={onStartClick} title={TITLE_BUTTON[0]} />\r\n      )}\r\n      {isRunning && (\r\n        <ControlsButton onButtonClick={onPauseClick} title={TITLE_BUTTON[1]} />\r\n      )}\r\n      <ControlsButton onButtonClick={onResetClick} title={TITLE_BUTTON[2]} />\r\n      {!isBreak && (\r\n        <ControlsButton onButtonClick={onBreakClick} title={TITLE_BUTTON[5]} />\r\n      )}\r\n      {isBreak && (\r\n        <ControlsButton onButtonClick={setFocusTime} title={TITLE_BUTTON[6]} />\r\n      )}\r\n      <ControlsButton\r\n        onButtonClick={handleShowEditButton}\r\n        title={isEdit ? TITLE_BUTTON[4] : TITLE_BUTTON[3]}\r\n      />\r\n    </ControlsWrapper>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n\r\nconst ControlsWrapper = styled.section`\r\n  display: flex;\r\n  gap: 15px;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst ControlsButton = styled(Button)`\r\n  background-color: white;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  border: 2px solid black;\r\n  font-size: 24px;\r\n  text-transform: capitalize;\r\n  min-width: 100px;\r\n  width: 100%;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    max-width: 300px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <HeaderWrapper>\r\n      <HeaderTitle>Pomodoro ‚åõüçÖ‚åõ</HeaderTitle>\r\n    </HeaderWrapper>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n\r\nconst HeaderWrapper = styled.header``;\r\n\r\nconst HeaderTitle = styled.h1`\r\n  margin: 0;\r\n  padding: 0;\r\n  color: white;\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../Button/Button';\r\n\r\nconst Pomodoro = ({\r\n  handleTimeEditSubtract,\r\n  handleTimeEditAdd,\r\n  handleHiddenButtonEdit,\r\n  minutes,\r\n  seconds,\r\n}) => {\r\n  return (\r\n    <PomodoroWrapper>\r\n      {handleHiddenButtonEdit && (\r\n        <EditButtonWrapper>\r\n          <EditButton onButtonClick={handleTimeEditAdd} title=\"+\" />\r\n          <EditButton onButtonClick={handleTimeEditSubtract} title=\"-\" />\r\n        </EditButtonWrapper>\r\n      )}\r\n      <Timer>{`${minutes}:${seconds}`}</Timer>\r\n    </PomodoroWrapper>\r\n  );\r\n};\r\n\r\nexport default Pomodoro;\r\n\r\nconst PomodoroWrapper = styled.section`\r\n  display: flex;\r\n  gap: 20px;\r\n  justify-content: center;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    flex-direction: column;\r\n    gap: 0;\r\n  }\r\n`;\r\n\r\nconst EditButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    flex-direction: row;\r\n    order: 1;\r\n    gap: 30px;\r\n  }\r\n`;\r\n\r\nconst EditButton = styled(Button)`\r\n  background-color: transparent;\r\n  font-size: 50px;\r\n  padding: 0;\r\n  border: none;\r\n  color: white;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    font-size: 70px;\r\n    line-height: 1;\r\n  }\r\n`;\r\n\r\nconst Timer = styled.div`\r\n  color: white;\r\n  font-size: 120px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n\r\n  @media screen and (max-width: 400px) {\r\n    font-size: 98px;\r\n    line-height: 1;\r\n  }\r\n`;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport GlobalStyle from '../../styles/globalStyles';\r\nimport Controls from '../Controls/Controls';\r\nimport Header from '../Header/Header';\r\nimport Pomodoro from '../Pomodoro/Pomodoro';\r\nimport { CURRENT_TIME, BREAK_TIME } from '../../config/config';\r\n\r\nfunction App() {\r\n  const [currentTime, setCurrentTime] = useState(CURRENT_TIME);\r\n  const [timeLeft, setTimeLeft] = useState(currentTime * 60);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [isBreak, setIsBreak] = useState(false);\r\n\r\n  let intervalRef = useRef(null);\r\n\r\n  useEffect(() => setTimeLeft(currentTime * 60), [currentTime]);\r\n  useEffect(() => {\r\n    if (timeLeft === 0) {\r\n      window.navigator.vibrate([200, 100, 200]);\r\n    }\r\n  }, [timeLeft]);\r\n\r\n  const padTime = (time) => {\r\n    return Math.floor(time).toString().padStart(2, '0');\r\n  };\r\n\r\n  // const notification = (params) => {\r\n  //   window.navigator.vibrate([200, 100, 200]);\r\n  // };\r\n\r\n  const minutes = padTime(timeLeft / 60);\r\n\r\n  const seconds = padTime(timeLeft - minutes * 60);\r\n\r\n  const toStartTimer = () => {\r\n    if (intervalRef.current !== null) return;\r\n    setIsEdit(false);\r\n    setIsRunning(true);\r\n    intervalRef.current = setInterval(\r\n      () =>\r\n        setTimeLeft((timeLeft) => {\r\n          if (timeLeft >= 1) return timeLeft - 1;\r\n          setTimeout(toResetTime(), 2000);\r\n          return 0;\r\n        }),\r\n      1000\r\n    );\r\n  };\r\n  const resetRunningState = () => {\r\n    setIsRunning(false);\r\n    intervalRef.current = null;\r\n  };\r\n\r\n  const toPauseTime = () => {\r\n    if (intervalRef.current === null) return;\r\n    clearInterval(intervalRef.current);\r\n    resetRunningState();\r\n  };\r\n\r\n  const toBreakTime = () => {\r\n    clearInterval(intervalRef.current);\r\n    setTimeLeft(BREAK_TIME * 60);\r\n    setCurrentTime(BREAK_TIME);\r\n    setIsBreak(true);\r\n    resetRunningState();\r\n  };\r\n\r\n  const setFocusTime = () => {\r\n    clearInterval(intervalRef.current);\r\n    setTimeLeft(currentTime * 60);\r\n    setCurrentTime(CURRENT_TIME);\r\n    setIsBreak(false);\r\n    resetRunningState();\r\n  };\r\n\r\n  const toResetTime = () => {\r\n    clearInterval(intervalRef.current);\r\n    setTimeLeft(currentTime * 60);\r\n    resetRunningState();\r\n  };\r\n\r\n  const handleShowEditButton = () => {\r\n    setIsEdit(!isEdit);\r\n  };\r\n\r\n  const handleTimeEditSubtract = () => {\r\n    if (currentTime <= 1) return;\r\n    setCurrentTime(currentTime - 1);\r\n  };\r\n\r\n  const handleTimeEditAdd = () => {\r\n    if (currentTime >= 60) return;\r\n    setCurrentTime(currentTime + 1);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <AppContainer>\r\n        <GlobalStyle />\r\n        <Header />\r\n        <Pomodoro\r\n          handleHiddenButtonEdit={isEdit}\r\n          handleTimeEditSubtract={handleTimeEditSubtract}\r\n          handleTimeEditAdd={handleTimeEditAdd}\r\n          minutes={minutes}\r\n          seconds={seconds}\r\n        />\r\n        <Controls\r\n          isRunning={isRunning}\r\n          onStartClick={toStartTimer}\r\n          onResetClick={toResetTime}\r\n          onPauseClick={toPauseTime}\r\n          onBreakClick={toBreakTime}\r\n          setFocusTime={setFocusTime}\r\n          isEdit={isEdit}\r\n          isBreak={isBreak}\r\n          handleShowEditButton={handleShowEditButton}\r\n        />\r\n      </AppContainer>\r\n      <BackgroundMask\r\n        style={{\r\n          clipPath: `circle(${(timeLeft / currentTime / 60) * 142}% at 0 0)`,\r\n        }}\r\n      />\r\n      <Background />\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  height: 100vh;\r\n`;\r\n\r\nconst AppContainer = styled.div`\r\n  max-width: 800px;\r\n  padding: 20px;\r\n  margin: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 30px;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    padding: 20px 10px;\r\n    box-sizing: border-box;\r\n    height: 100%;\r\n    justify-content: space-between;\r\n    gap: 10px;\r\n  }\r\n`;\r\n\r\nconst BackgroundMask = styled.div`\r\n  background-color: #fc5650;\r\n  height: 100vh;\r\n  width: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: -1;\r\n  transition: clip-path 1s linear 0s;\r\n`;\r\n\r\nconst Background = styled.div`\r\n  background-color: #13a10e;\r\n  height: 100vh;\r\n  width: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: -2;\r\n`;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}