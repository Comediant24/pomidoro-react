{"version":3,"sources":["styles/globalStyles.js","components/Button/Button.js","config/config.js","components/Controls/Controls.js","components/Header/Header.js","components/Pomodoro/Pomodoro.js","components/App/App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["GlobalStyle","createGlobalStyle","normalize","Button","onButtonClick","className","title","ButtonWrapper","onClick","styled","button","TITLE_BUTTON","Controls","isRunning","onStartClick","onResetClick","onPauseClick","onBreakClick","setFocusTime","handleShowEditButton","isEdit","isBreak","ControlsWrapper","ControlsButton","section","Header","HeaderWrapper","HeaderTitle","header","h1","Pomodoro","handleTimeEditSubtract","handleTimeEditAdd","handleHiddenButtonEdit","minutes","seconds","PomodoroWrapper","EditButtonWrapper","EditButton","Timer","div","App","useState","currentTime","setCurrentTime","timeLeft","setTimeLeft","setIsRunning","setIsEdit","setIsBreak","intervalRef","useRef","useEffect","window","navigator","vibrate","padTime","time","Math","floor","toString","padStart","resetRunningState","current","toResetTime","clearInterval","Wrapper","AppContainer","setInterval","setTimeout","BREAK_TIME","BackgroundMask","style","clipPath","Background","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.6a524ea9.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport normalize from 'styled-normalize';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap');\n\n  ${normalize};\n\n  body {\n    font-family:  'Share Tech Mono', 'Courier New', monospace;\n    min-width: 320px;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Button = ({ onButtonClick, className, title }) => {\n  return (\n    <ButtonWrapper onClick={onButtonClick} className={className}>\n      {title}\n    </ButtonWrapper>\n  );\n};\n\nexport default Button;\n\nconst ButtonWrapper = styled.button``;\n","export const CURRENT_TIME = 25;\nexport const BREAK_TIME = 5;\nexport const TITLE_BUTTON = [\n  'start',\n  'pause',\n  'reset',\n  'edit',\n  'save',\n  'break',\n  'focus',\n];\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../Button/Button';\nimport { TITLE_BUTTON } from '../../config/config';\n\nconst Controls = ({\n  isRunning,\n  onStartClick,\n  onResetClick,\n  onPauseClick,\n  onBreakClick,\n  setFocusTime,\n  handleShowEditButton,\n  isEdit,\n  isBreak,\n}) => {\n  return (\n    <ControlsWrapper>\n      {!isRunning && (\n        <ControlsButton onButtonClick={onStartClick} title={TITLE_BUTTON[0]} />\n      )}\n      {isRunning && (\n        <ControlsButton onButtonClick={onPauseClick} title={TITLE_BUTTON[1]} />\n      )}\n      <ControlsButton onButtonClick={onResetClick} title={TITLE_BUTTON[2]} />\n      {!isBreak && (\n        <ControlsButton onButtonClick={onBreakClick} title={TITLE_BUTTON[5]} />\n      )}\n      {isBreak && (\n        <ControlsButton onButtonClick={setFocusTime} title={TITLE_BUTTON[6]} />\n      )}\n      <ControlsButton\n        onButtonClick={handleShowEditButton}\n        title={isEdit ? TITLE_BUTTON[4] : TITLE_BUTTON[3]}\n      />\n    </ControlsWrapper>\n  );\n};\n\nexport default Controls;\n\nconst ControlsWrapper = styled.section`\n  display: flex;\n  gap: 15px;\n  justify-content: center;\n  align-items: center;\n\n  @media screen and (max-width: 500px) {\n    flex-direction: column;\n  }\n`;\n\nconst ControlsButton = styled(Button)`\n  background-color: white;\n  padding: 10px;\n  cursor: pointer;\n  border: 2px solid black;\n  font-size: 24px;\n  text-transform: capitalize;\n  min-width: 100px;\n  width: 100%;\n\n  @media screen and (max-width: 500px) {\n    max-width: 300px;\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Header = () => {\n  return (\n    <HeaderWrapper>\n      <HeaderTitle>Pomodoro ‚åõüçÖ‚åõ</HeaderTitle>\n    </HeaderWrapper>\n  );\n};\n\nexport default Header;\n\nconst HeaderWrapper = styled.header``;\n\nconst HeaderTitle = styled.h1`\n  margin: 0;\n  padding: 0;\n  color: white;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../Button/Button';\n\nconst Pomodoro = ({\n  handleTimeEditSubtract,\n  handleTimeEditAdd,\n  handleHiddenButtonEdit,\n  minutes,\n  seconds,\n}) => {\n  return (\n    <PomodoroWrapper>\n      {handleHiddenButtonEdit && (\n        <EditButtonWrapper>\n          <EditButton onButtonClick={handleTimeEditAdd} title=\"+\" />\n          <EditButton onButtonClick={handleTimeEditSubtract} title=\"-\" />\n        </EditButtonWrapper>\n      )}\n      <Timer>{`${minutes}:${seconds}`}</Timer>\n    </PomodoroWrapper>\n  );\n};\n\nexport default Pomodoro;\n\nconst PomodoroWrapper = styled.section`\n  display: flex;\n  gap: 20px;\n  justify-content: center;\n\n  @media screen and (max-width: 500px) {\n    flex-direction: column;\n    gap: 0;\n  }\n`;\n\nconst EditButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  @media screen and (max-width: 500px) {\n    flex-direction: row;\n    order: 1;\n    gap: 30px;\n  }\n`;\n\nconst EditButton = styled(Button)`\n  background-color: transparent;\n  font-size: 50px;\n  padding: 0;\n  border: none;\n  color: white;\n  font-weight: bold;\n  cursor: pointer;\n\n  @media screen and (max-width: 500px) {\n    font-size: 70px;\n    line-height: 1;\n  }\n`;\n\nconst Timer = styled.div`\n  color: white;\n  font-size: 120px;\n  font-weight: bold;\n  text-align: center;\n\n  @media screen and (max-width: 400px) {\n    font-size: 98px;\n    line-height: 1;\n  }\n`;\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components/macro';\nimport GlobalStyle from '../../styles/globalStyles';\nimport Controls from '../Controls/Controls';\nimport Header from '../Header/Header';\nimport Pomodoro from '../Pomodoro/Pomodoro';\nimport { CURRENT_TIME, BREAK_TIME } from '../../config/config';\n\nfunction App() {\n  const [currentTime, setCurrentTime] = useState(CURRENT_TIME);\n  const [timeLeft, setTimeLeft] = useState(currentTime * 60);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isEdit, setIsEdit] = useState(false);\n  const [isBreak, setIsBreak] = useState(false);\n\n  let intervalRef = useRef(null);\n\n  useEffect(() => setTimeLeft(currentTime * 60), [currentTime]);\n  useEffect(() => {\n    if (timeLeft === 0) {\n      window.navigator.vibrate([400, 200, 400]);\n    }\n  }, [timeLeft]);\n\n  const padTime = (time) => {\n    return Math.floor(time).toString().padStart(2, '0');\n  };\n\n  const minutes = padTime(timeLeft / 60);\n\n  const seconds = padTime(timeLeft - minutes * 60);\n\n  const toStartTimer = () => {\n    if (intervalRef.current !== null) return;\n    setIsEdit(false);\n    setIsRunning(true);\n    intervalRef.current = setInterval(\n      () =>\n        setTimeLeft((timeLeft) => {\n          if (timeLeft >= 1) return timeLeft - 1;\n          setTimeout(toResetTime(), 2000);\n          return 0;\n        }),\n      1000\n    );\n  };\n  const resetRunningState = () => {\n    setIsRunning(false);\n    intervalRef.current = null;\n  };\n\n  const toPauseTime = () => {\n    if (intervalRef.current === null) return;\n    clearInterval(intervalRef.current);\n    resetRunningState();\n  };\n\n  const toBreakTime = () => {\n    clearInterval(intervalRef.current);\n    setTimeLeft(BREAK_TIME * 60);\n    setCurrentTime(BREAK_TIME);\n    setIsBreak(true);\n    resetRunningState();\n  };\n\n  const setFocusTime = () => {\n    clearInterval(intervalRef.current);\n    setTimeLeft(currentTime * 60);\n    setCurrentTime(CURRENT_TIME);\n    setIsBreak(false);\n    resetRunningState();\n  };\n\n  const toResetTime = () => {\n    clearInterval(intervalRef.current);\n    setTimeLeft(currentTime * 60);\n    resetRunningState();\n  };\n\n  const handleShowEditButton = () => {\n    setIsEdit(!isEdit);\n  };\n\n  const handleTimeEditSubtract = () => {\n    if (currentTime <= 1) return;\n    setCurrentTime(currentTime - 1);\n  };\n\n  const handleTimeEditAdd = () => {\n    if (currentTime >= 60) return;\n    setCurrentTime(currentTime + 1);\n  };\n\n  return (\n    <Wrapper>\n      <AppContainer>\n        <GlobalStyle />\n        <Header />\n        <Pomodoro\n          handleHiddenButtonEdit={isEdit}\n          handleTimeEditSubtract={handleTimeEditSubtract}\n          handleTimeEditAdd={handleTimeEditAdd}\n          minutes={minutes}\n          seconds={seconds}\n        />\n        <Controls\n          isRunning={isRunning}\n          onStartClick={toStartTimer}\n          onResetClick={toResetTime}\n          onPauseClick={toPauseTime}\n          onBreakClick={toBreakTime}\n          setFocusTime={setFocusTime}\n          isEdit={isEdit}\n          isBreak={isBreak}\n          handleShowEditButton={handleShowEditButton}\n        />\n      </AppContainer>\n      <BackgroundMask\n        style={{\n          clipPath: `circle(${(timeLeft / currentTime / 60) * 142}% at 0 0)`,\n        }}\n      />\n      <Background />\n    </Wrapper>\n  );\n}\n\nexport default App;\n\nconst Wrapper = styled.div`\n  position: relative;\n  height: 100vh;\n`;\n\nconst AppContainer = styled.div`\n  max-width: 800px;\n  padding: 20px;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n\n  @media screen and (max-width: 500px) {\n    padding: 20px 10px;\n    box-sizing: border-box;\n    height: 100%;\n    justify-content: space-between;\n    gap: 10px;\n  }\n`;\n\nconst BackgroundMask = styled.div`\n  background-color: #fc5650;\n  height: 100vh;\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  transition: clip-path 1s linear 0s;\n`;\n\nconst Background = styled.div`\n  background-color: #13a10e;\n  height: 100vh;\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: -2;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\nreportWebVitals();\n"],"sourceRoot":""}